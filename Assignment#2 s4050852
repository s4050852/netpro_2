
import java.util.List;
import java.net.URL;
import java.net.URLConnection;
import java.util.Map;


public class NewJFrame extends javax.swing.JFrame {

   
    public NewJFrame() {
        initComponents();
    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jEditorPane1 = new javax.swing.JEditorPane();
        url1 = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jEditorPane2 = new javax.swing.JEditorPane();
        url2 = new javax.swing.JTextField();
        go = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Chotika Montha s4050852@kmitl.ac.th - Java Web Browser (Network Programming Class Assignment)");

        jScrollPane1.setViewportView(jEditorPane1);

        url1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                url1ActionPerformed(evt);
            }
        });

        jScrollPane2.setViewportView(jEditorPane2);

        url2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                url2ActionPerformed(evt);
            }
        });

        go.setText("Go");
        go.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane3.setViewportView(jTextArea1);

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane4.setViewportView(jTextArea2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(url1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING))
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(url2, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(go, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(url2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(url1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(go)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 152, Short.MAX_VALUE)
                    .addComponent(jScrollPane4)))
        );

        pack();
    }// </editor-fold>                        

    private void url1ActionPerformed(java.awt.event.ActionEvent evt) {                                     
        // TODO add your handling code here:
    }                                    

    private void url2ActionPerformed(java.awt.event.ActionEvent evt) {                                     
        // TODO add your handling code here:
    }                                    

    private void goActionPerformed(java.awt.event.ActionEvent evt) {                                   
        Thread thread1; 
        thread1 = new Thread(new Runnable(){
            private Map<String, java.util.List<String>> map;
        @Override
        public void run(){  
           
            try
            {
                
                jTextArea1.append("Thread A : Start \n");
                jTextArea1.append("Thread A : Getpage url = "+url1.getText()+"\n");
                jEditorPane1.setPage(url1.getText());
                     
               
                try {
                    
                    URL obj;
                    obj = new URL(url1.getText());
                    URLConnection conn = obj.openConnection();
                    
                 
                    Map<String, List<String>> map = conn.getHeaderFields();
 
                    jTextArea1.append("- - - - - - - - - - - - - - - \nThread A: Response Header\n");
                    for (Map.Entry<String, List<String>> entry : map.entrySet()) {
                        jTextArea1.append("Thread A : " + entry.getKey() 
                           + " : " + entry.getValue()+"\n");
                    }
 
                jTextArea1.append("Get Response Header By Thread A :...\n");
                String server = conn.getHeaderField("Server");
 
                if (server == null) {
                    jTextArea1.append("Thread A: 'Server' is not found!\n");
                } else {
		jTextArea1.append("Server - " + server+"\n");
                }
 
                jTextArea1.append("Done\n");
 
                } catch (Exception e) {
                    e.printStackTrace();
                }
                // end print header
                
                
              //  jTextArea1.append("Thread A : Showed page \n");  
                jTextArea1.append("Thread A : Finished \n");
           }
                catch(Exception e){
                    jEditorPane1.setText("Error: " +e);
                }
      } 
   });
        thread1.start(); 
        
        // Thread 2
       Thread thread2; 
        thread2 = new Thread(new Runnable(){
        @Override
        public void run(){
           
            try
            {
                
                jTextArea2.append("Thread B: Start \n");
                jTextArea2.append("Thread B : Getpage url = "+url2.getText()+"\n");
                jEditorPane2.setPage(url2.getText());
                     
                //HTTP response header      
                try {
                    URL obj = new URL(url2.getText());
                    URLConnection conn = obj.openConnection();
                    Map<String, List<String>> map = conn.getHeaderFields();
 
                    jTextArea2.append("- - - - - - - - - - - - - - -\nThread B : Response Header\n");
 
                    for (Map.Entry<String, List<String>> entry : map.entrySet()) {
                        jTextArea2.append("Thread B : " + entry.getKey() 
                           + " : " + entry.getValue()+"\n");
                    }
 
                jTextArea2.append("Get Response Header By Thread B ...\n");
                String server = conn.getHeaderField("Server");
 
                if (server == null) {
                    jTextArea2.append("Thread B 'Server' is not found!\n");
                } else {
		jTextArea2.append("Server - " + server+"\n");
                }
 
                jTextArea2.append("Done\n");
 
                } catch (Exception e) {
                    e.printStackTrace();
                }
                // end print header
                
               // jTextArea2.append("Thread B : Showed page \n");  
                jTextArea2.append("Thread B : Finished \n");
           }
                catch(Exception e){
                    jEditorPane2.setText("Error: " +e);
                }
      } 
   });
        thread2.start(); 
        
        
        
    }                                  

   
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify                     
    private javax.swing.JButton go;
    private javax.swing.JEditorPane jEditorPane1;
    private javax.swing.JEditorPane jEditorPane2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextField url1;
    private javax.swing.JTextField url2;
    // End of variables declaration                   
}
